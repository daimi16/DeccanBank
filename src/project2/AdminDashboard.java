/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project2;

import java.awt.Color;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Admin
 */
public class AdminDashboard extends javax.swing.JFrame {

    /**
     * Creates new form AdminDashboard
     */
    public Connection connect;
    private static HttpURLConnection connection;

    public AdminDashboard() {
        initComponents();
        ShowData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        AccountNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Amount = new javax.swing.JTextField();
        DepositBtn = new javax.swing.JButton();
        CloseBtn = new javax.swing.JButton();
        WithdrawBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        CustomerDataTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        Fname = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        Lname = new javax.swing.JTextField();
        MobileNo = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        AdharNo = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        PanNo = new javax.swing.JTextField();
        Email = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        Address = new javax.swing.JTextField();
        Gender = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        UpdateBtn = new javax.swing.JButton();
        DeleteBtn = new javax.swing.JButton();
        CloseBtnCustomer = new javax.swing.JButton();
        AccountType = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        Clear = new javax.swing.JButton();
        CAccountNo = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jTabbedPane1.setBackground(new java.awt.Color(0, 0, 255));
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255), 5));
        jTabbedPane1.setForeground(new java.awt.Color(51, 51, 51));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 18)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(0, 0, 255));
        jPanel1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("Hello Admin");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 255));
        jLabel2.setText("Welcome to Deccan Bank");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 255));
        jLabel3.setText("Deposit Money OR Withdraw Money");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Enter Account No");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Add Amount");

        DepositBtn.setBackground(new java.awt.Color(0, 204, 0));
        DepositBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        DepositBtn.setForeground(new java.awt.Color(255, 255, 255));
        DepositBtn.setText("Deposit");
        DepositBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepositBtnActionPerformed(evt);
            }
        });

        CloseBtn.setBackground(new java.awt.Color(255, 0, 0));
        CloseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project2/Images/icons8-close-window-30.png"))); // NOI18N
        CloseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseBtnActionPerformed(evt);
            }
        });

        WithdrawBtn.setBackground(new java.awt.Color(255, 0, 0));
        WithdrawBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        WithdrawBtn.setForeground(new java.awt.Color(255, 255, 255));
        WithdrawBtn.setText("Withdraw");
        WithdrawBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WithdrawBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CloseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2)))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(366, 366, 366)
                .addComponent(jLabel3)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(400, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(AccountNo, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(DepositBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                            .addComponent(WithdrawBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(Amount)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5))
                            .addGap(0, 0, Short.MAX_VALUE))))
                .addGap(482, 482, 482))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addComponent(CloseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(10, 10, 10)
                .addComponent(jLabel3)
                .addGap(68, 68, 68)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AccountNo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Amount, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DepositBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WithdrawBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(238, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Accounts", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setForeground(new java.awt.Color(0, 0, 255));

        CustomerDataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sr.No", "A/C No", "First Name", "Last Name", "Gender", "Mobile No", "Adhar No", "Pan No", "Email", "Address", "A/C Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CustomerDataTable.setCellSelectionEnabled(true);
        CustomerDataTable.getTableHeader().setReorderingAllowed(false);
        CustomerDataTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CustomerDataTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(CustomerDataTable);
        CustomerDataTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("First Name : ");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Last Name : ");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Mobile No: ");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Adhar No : ");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Pan No : ");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("Email : ");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setText("Address : ");

        Gender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other" }));
        Gender.setToolTipText("");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setText("Gender : ");

        UpdateBtn.setBackground(new java.awt.Color(0, 153, 0));
        UpdateBtn.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        UpdateBtn.setForeground(new java.awt.Color(255, 255, 255));
        UpdateBtn.setText("Update");
        UpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtnActionPerformed(evt);
            }
        });

        DeleteBtn.setBackground(new java.awt.Color(255, 0, 0));
        DeleteBtn.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        DeleteBtn.setForeground(new java.awt.Color(255, 255, 255));
        DeleteBtn.setText("Delete");
        DeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnActionPerformed(evt);
            }
        });

        CloseBtnCustomer.setBackground(new java.awt.Color(255, 0, 0));
        CloseBtnCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project2/Images/icons8-close-window-30.png"))); // NOI18N
        CloseBtnCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseBtnCustomerActionPerformed(evt);
            }
        });

        AccountType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Saving", "Current" }));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel14.setText("Account Type:");

        Clear.setBackground(new java.awt.Color(51, 51, 255));
        Clear.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        Clear.setForeground(new java.awt.Color(255, 255, 255));
        Clear.setText("Clear");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        CAccountNo.setEnabled(false);

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel15.setText("Account No:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(MobileNo, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addGap(18, 18, 18)
                            .addComponent(Fname, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addGap(18, 18, 18)
                            .addComponent(Lname, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AdharNo, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel10)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PanNo, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel11)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Email, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel12)
                                .addComponent(jLabel13)
                                .addComponent(jLabel14))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Gender, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Address, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(AccountType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(UpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(DeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(18, 18, 18)
                        .addComponent(CAccountNo, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 794, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(CloseBtnCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(CloseBtnCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CAccountNo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Fname, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Lname, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MobileNo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AdharNo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PanNo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Email, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Address, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(Gender, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AccountType, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Customers", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void DepositBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepositBtnActionPerformed
        // TODO add your handling code here:
        boolean Checker;

        String userEnterAC = AccountNo.getText();
        String EnteredAmount = Amount.getText();
        if (AccountNo.getText().length() == 12 && AccountNo.getText().matches("^[0-9]*$")) {
            Checker = true;
            AccountNo.setBackground(Color.GREEN);
        } else {
            Checker = false;
            AccountNo.setBackground(new Color(246, 53, 40));
            JOptionPane.showMessageDialog(null, "Account Number Is Invalid and bank customer not found");
        }
        if (Amount.getText().length() <= 7 && Amount.getText().matches("^[0-9]*$")) {
            Checker = true;
            Amount.setBackground(Color.GREEN);
        }
        if (!"".equals(Amount.getText()) && !"0".equals(Amount.getText())) {
            Checker = true;
            Amount.setBackground(Color.GREEN);
        } else {
            Checker = false;
            Amount.setBackground(new Color(246, 53, 40));
            JOptionPane.showMessageDialog(null, "Please Enter Valid Amount between 1 to 1000000");
        }

        if (Checker == true) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                connect = DriverManager.getConnection("jdbc:mysql://localhost:3306/deccanbank", "root", "");
                String query = "Select * from customer_detail where Account_Number=? ";
                PreparedStatement pst = connect.prepareStatement(query);
                pst.setString(1, AccountNo.getText());
                ResultSet rs = pst.executeQuery();
                if (rs.next()) {
//                    JOptionPane.showMessageDialog(null, "Valid Account");
                    AccountNo.setBackground(Color.GREEN);

                    String Balance = rs.getNString("Balance");
                    String Email = rs.getNString("Email");
                    float balance = Float.parseFloat(Balance);
                    float amount = Float.parseFloat(Amount.getText());
                    String TotalBalance = Float.toString(balance + amount);

                    try {
                        query = "update customer_detail set Balance='" + TotalBalance + "' where Account_Number='" + AccountNo.getText() + "' ";
                        pst = connect.prepareStatement(query);
                        pst.execute();

//                        Transaction History
                        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                        String Date = sdf.format(new Date());
                        String Debit = "Debited";
                        String Credit = "Credited";

                        String query6 = "Insert into TransactionHistory(Date, AccountNumber, Amount, CreditDebit) Values ('" + Date + "', '" + AccountNo.getText() + "', '" + Amount.getText() + "', '" + Credit + "')";
                        PreparedStatement pst6 = connect.prepareStatement(query6);
                        pst6.execute();

                        try {

                            String ac = AccountNo.getText(); //Integer.parseInt(AccountNo.getText());
                            float money = Float.parseFloat(Amount.getText());

                            System.out.println("http://localhost/mail/index.php?mail=" + Email + "&subject=A/C%20" + ac + "%20Amount+Credited+On+Your+Account&body=New+Amount+Credited+On+Your+Account+Rs%20" + money + "Credited+on+Your+Account.+Your+Total+Balance+is%20" + TotalBalance);

                            URL url = new URL("http://localhost/mail/index.php?mail=" + Email + "&subject=A/C%20" + ac + "%20Amount+Credited+On+Your+Account&body=New+Amount+Credited+On+Your+Account+Rs%20" + money + "Credited+on+Your+Account.+Your+Total+Balance+is%20" + TotalBalance);
                            connection = (HttpURLConnection) url.openConnection();
                            connection.setRequestMethod("GET");
                            connection.setConnectTimeout(9000);
                            connection.setReadTimeout(9000);

                            int status = connection.getResponseCode();

                        } catch (MalformedURLException ex) {
                            Logger.getLogger(ResetPassword.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(null, "Amount Credited But email not sent !");

                        } catch (IOException ex) {
                            Logger.getLogger(ResetPassword.class.getName()).log(Level.SEVERE, null, ex);

                            JOptionPane.showMessageDialog(null, "Amount Credited But email not sent !");

                        }

                        JOptionPane.showMessageDialog(null, "Transaction Done Successfully !");
                        AccountNo.setText("");
                        AccountNo.setBackground(Color.WHITE);
                        Amount.setText("");
                        Amount.setBackground(Color.WHITE);

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Invalid Account Number");
                    AccountNo.setBackground(new Color(246, 53, 40));
                }
                connect.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

        }


    }//GEN-LAST:event_DepositBtnActionPerformed

    private void CloseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseBtnActionPerformed
        setVisible(false);
        new Login().setVisible(true);
        dispose();
    }//GEN-LAST:event_CloseBtnActionPerformed

    private void CloseBtnCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseBtnCustomerActionPerformed
        setVisible(false);
        new Login().setVisible(true);
        dispose();
    }//GEN-LAST:event_CloseBtnCustomerActionPerformed

    private void CustomerDataTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CustomerDataTableMouseClicked
        int index = CustomerDataTable.getSelectedRow();
        TableModel model = CustomerDataTable.getModel();

        String SrNo = model.getValueAt(index, 0).toString();
        String TAcNo = model.getValueAt(index, 1).toString();
        String TFname = model.getValueAt(index, 2).toString();
        String TLname = model.getValueAt(index, 3).toString();
        String TGender = model.getValueAt(index, 4).toString();
        String TMobileNo = model.getValueAt(index, 5).toString();
        String TAdharNo = model.getValueAt(index, 6).toString();
        String TPanNo = model.getValueAt(index, 7).toString();
        String TEmail = model.getValueAt(index, 8).toString();
        String TAddress = model.getValueAt(index, 9).toString();
        String TAccountType = model.getValueAt(index, 10).toString();

        CAccountNo.setText(TAcNo);
        Fname.setText(TFname);
        Lname.setText(TLname);
        MobileNo.setText(TMobileNo);
        AdharNo.setText(TAdharNo);
        PanNo.setText(TPanNo);
        Email.setText(TEmail);
        Address.setText(TAddress);

        // Setting JCombo box value
        if ("Male".equals(TGender)) {
            Gender.setSelectedIndex(0);
        } else if ("Female".equals(TGender)) {
            Gender.setSelectedIndex(1);
        } else {
            Gender.setSelectedIndex(2);
        }

        if ("Saving".equals(TAccountType)) {
            AccountType.setSelectedIndex(0);
        } else {
            AccountType.setSelectedIndex(1);
        }

    }//GEN-LAST:event_CustomerDataTableMouseClicked

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        Clear();
    }//GEN-LAST:event_ClearActionPerformed

    private void UpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBtnActionPerformed
        boolean Panerror = false;
        boolean Emailerror = false;
        boolean Adharerror = false;
        boolean Checker = true;

        if (!"".equals(Fname.getText())) {
            Checker = true;
            Fname.setBackground(Color.GREEN);

            if (!"".equals(Lname.getText())) {
                Checker = true;
                Lname.setBackground(Color.GREEN);

                if (MobileNo.getText() != "" && MobileNo.getText().matches("^[0-9]*$") && MobileNo.getText().length() == 10) {
                    Checker = true;
                    MobileNo.setBackground(Color.GREEN);

                    if (PanNo.getText().length() == 10) {
                        Checker = true;
                        PanNo.setBackground(Color.GREEN);

                        if (Email.getText().matches("^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$")) {
                            Checker = true;
                            Email.setBackground(Color.GREEN);

                            if (AdharNo.getText().matches("^[0-9]*$") && AdharNo.getText().length() == 12) {
                                Checker = true;
                                AdharNo.setBackground(Color.GREEN);

                                if (!"".equals(Address.getText())) {
                                    Checker = true;
                                    Address.setBackground(Color.GREEN);

                                    //  Database Connection and queries
                                    if (Checker == true) {

                                        if (Panerror == false && Adharerror == false && Emailerror == false) {

                                            try {

                                                Class.forName("com.mysql.jdbc.Driver");
                                                connect = DriverManager.getConnection("jdbc:mysql://localhost:3306/deccanbank", "root", "");
                                                String query = "update customer_detail set First_Name = '" + Fname.getText() + "', Last_Name = '" + Lname.getText() + "', Gender = '" + Gender.getSelectedItem().toString() + "', Mobile_Number= '" + MobileNo.getText() + "', Pan_Number='" + PanNo.getText() + "', Account_Type= '" + AccountType.getSelectedItem().toString() + "', Adhar_Number= '" + AdharNo.getText() + "', Email= '" + Email.getText() + "', Address= '" + Address.getText() + "'  where Account_Number='" + CAccountNo.getText() + "' ";
                                                PreparedStatement pst = connect.prepareStatement(query);
                                                pst.execute();
                                                JOptionPane.showMessageDialog(null, "Details Updated of " + Fname.getText() + " " + Lname.getText() + " Successfully !");
                                                Clear();
                                                ShowData();
                                            } catch (ClassNotFoundException ex) {
                                                Logger.getLogger(AdminDashboard.class.getName()).log(Level.SEVERE, null, ex);
                                            } catch (SQLException ex) {
                                                Logger.getLogger(AdminDashboard.class.getName()).log(Level.SEVERE, null, ex);
                                            }

                                        } else {
                                            JOptionPane.showMessageDialog(null, "Please Correct details");
                                        }
                                    }

                                } else {

                                    Checker = false;
                                    Address.setBackground(new Color(246, 53, 40));
                                }
                            } else {
                                Checker = false;
                                AdharNo.setBackground(new Color(246, 53, 40));
                            }

                        } else {
                            Checker = false;
                            Email.setBackground(new Color(246, 53, 40));

                        }

                    } else {
                        Checker = false;
                        PanNo.setBackground(new Color(246, 53, 40));
                    }
                } else {
                    Checker = false;
                    MobileNo.setBackground(new Color(246, 53, 40));
                }
            } else {
                Checker = false;
                Lname.setBackground(new Color(246, 53, 40));
            }
        } else {
            Checker = false;
            Fname.setBackground(new Color(246, 53, 40));
            System.out.print("error2");
        }


    }//GEN-LAST:event_UpdateBtnActionPerformed

    private void DeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnActionPerformed

        if ("".equals(CAccountNo.getText())) {
            JOptionPane.showMessageDialog(null, "Please Select Account From Table");
        } else {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                connect = DriverManager.getConnection("jdbc:mysql://localhost:3306/deccanbank", "root", "");
                String query = "DELETE FROM customer_detail WHERE Account_Number='" + CAccountNo.getText() + "'";
                String query1 = "DELETE FROM cards WHERE AccountNumber='" + CAccountNo.getText() + "'";
                String query2 = "DELETE FROM logindetail WHERE AccountNumber='" + CAccountNo.getText() + "'";
                String query3 = "DELETE FROM request WHERE AccountNo='" + CAccountNo.getText() + "'";
                PreparedStatement pst = connect.prepareStatement(query);
                PreparedStatement pst1 = connect.prepareStatement(query1);
                PreparedStatement pst2 = connect.prepareStatement(query2);
                PreparedStatement pst3 = connect.prepareStatement(query3);

                pst.execute();
                pst1.execute();
                pst2.execute();
                pst3.execute();
                JOptionPane.showMessageDialog(null, "Account Deleted of " + Fname.getText() + " " + Lname.getText() + " Successfully !");
                Clear();
                ShowData();
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(AdminDashboard.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_DeleteBtnActionPerformed

    private void WithdrawBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WithdrawBtnActionPerformed
        // TODO add your handling code here:
        boolean Checker;

        String userEnterAC = AccountNo.getText();
        String EnteredAmount = Amount.getText();
        if (AccountNo.getText().length() == 12 && AccountNo.getText().matches("^[0-9]*$")) {
            Checker = true;
            AccountNo.setBackground(Color.GREEN);
        } else {
            Checker = false;
            AccountNo.setBackground(new Color(246, 53, 40));
            JOptionPane.showMessageDialog(null, "Account Number Is InValid and not found bank customer");
        }
        if (Amount.getText().length() <= 7 && Amount.getText().matches("^[0-9]*$")) {
            Checker = true;
            Amount.setBackground(Color.GREEN);
        }
        if (!"".equals(Amount.getText()) && !"0".equals(Amount.getText())) {
            Checker = true;
            Amount.setBackground(Color.GREEN);
        } else {
            Checker = false;
            Amount.setBackground(new Color(246, 53, 40));
            JOptionPane.showMessageDialog(null, "Please Enter Valid Amount or between 1 to 1000000");
        }

        if (Checker == true) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                connect = DriverManager.getConnection("jdbc:mysql://localhost:3306/deccanbank", "root", "");
                String query = "Select * from customer_detail where Account_Number=? ";
                PreparedStatement pst = connect.prepareStatement(query);
                pst.setString(1, AccountNo.getText());
                ResultSet rs = pst.executeQuery();
                if (rs.next()) {
//                    JOptionPane.showMessageDialog(null, "Valid Account");
                    AccountNo.setBackground(Color.GREEN);

                    String Balance = rs.getNString("Balance");
                    String Email = rs.getNString("Email");
                    float balance = Float.parseFloat(Balance);
                    float amount = Float.parseFloat(Amount.getText());
                    if (balance > amount) {

                        String TotalBalance = Float.toString(balance - amount);

                        try {
                            query = "update customer_detail set Balance='" + TotalBalance + "' where Account_Number='" + AccountNo.getText() + "' ";
                            pst = connect.prepareStatement(query);
                            pst.execute();

//                        Transaction History
                            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                            String Date = sdf.format(new Date());
                            String Debit = "Debited";
                            String Credit = "Credited";

                            String query6 = "Insert into TransactionHistory(Date, AccountNumber, Amount, CreditDebit) Values ('" + Date + "', '" + AccountNo.getText() + "', '" + Amount.getText() + "', '" + Debit + "')";
                            PreparedStatement pst6 = connect.prepareStatement(query6);
                            pst6.execute();

                            try {

                                String ac = AccountNo.getText(); //Integer.parseInt(AccountNo.getText());
                                float money = Float.parseFloat(Amount.getText());

                                System.out.println("http://localhost/mail/index.php?mail=" + Email + "&subject=A/C%20" + ac + "%20Amount+Debited+from+Your+Account&body=Amount+Debited+from+Your+Account+Rs%20" + money + "Debited+from+Your+Account.+Your+Total+Balance+is%20" + TotalBalance);

                                URL url = new URL("http://localhost/mail/index.php?mail=" + Email + "&subject=A/C%20" + ac + "%20Amount+Debited+On+from+Account&body=Amount+Debited+from+Your+Account+Rs%20" + money + "Debited+from+Your+Account.+Your+Total+Balance+is%20" + TotalBalance);
                                connection = (HttpURLConnection) url.openConnection();
                                connection.setRequestMethod("GET");
                                connection.setConnectTimeout(9000);
                                connection.setReadTimeout(9000);

                                int status = connection.getResponseCode();

                            } catch (MalformedURLException ex) {
                                Logger.getLogger(ResetPassword.class.getName()).log(Level.SEVERE, null, ex);
                                JOptionPane.showMessageDialog(null, "Amount Debited But email not sent !");

                            } catch (IOException ex) {
                                Logger.getLogger(ResetPassword.class.getName()).log(Level.SEVERE, null, ex);

                                JOptionPane.showMessageDialog(null, "Amount Debited But email not sent !");

                            }

                            JOptionPane.showMessageDialog(null, "Transaction Done Successfully !");
                            AccountNo.setText("");
                            AccountNo.setBackground(Color.WHITE);
                            Amount.setText("");
                            Amount.setBackground(Color.WHITE);

                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e);
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "insufficient balance in account. Balance In Account" + balance);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Invalid Account Number");
                    AccountNo.setBackground(new Color(246, 53, 40));
                }
                connect.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

        }
    }//GEN-LAST:event_WithdrawBtnActionPerformed

    public void ShowData() {

        try {

            Class.forName("com.mysql.jdbc.Driver");
            connect = DriverManager.getConnection("jdbc:mysql://localhost:3306/deccanbank", "root", "");
            String query = "Select * from customer_detail";
            PreparedStatement pst = connect.prepareStatement(query);
            ResultSet rs = pst.executeQuery();
            DefaultTableModel tableModel = (DefaultTableModel) CustomerDataTable.getModel();
            tableModel.setRowCount(0);
            int counter = 1;
            while (rs.next()) {

                String AcNo = rs.getNString("Account_Number");
                String Fname = rs.getNString("First_Name");
                String Lname = rs.getNString("Last_Name");
                String Gender = rs.getNString("Gender");
                String MobileNo = rs.getNString("Mobile_Number");
                String AdharNo = rs.getNString("Adhar_Number");
                String PanNo = rs.getNString("Pan_Number");
                String Email = rs.getNString("Email");
                String Address = rs.getNString("Address");
                String AccountType = rs.getNString("Account_Type");
                String SenderTableData[] = {Integer.toString(counter), AcNo, Fname, Lname, Gender, MobileNo, AdharNo, PanNo, Email, Address, AccountType};

                tableModel = (DefaultTableModel) CustomerDataTable.getModel();

                tableModel.addRow(SenderTableData);

                counter++;
            }
            connect.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

//    Clear Data In Text Field
    public void Clear() {

        CAccountNo.setText("");
        Fname.setText("");
        Fname.setBackground(Color.WHITE);
        Lname.setText("");
        Lname.setBackground(Color.WHITE);
        MobileNo.setText("");
        MobileNo.setBackground(Color.WHITE);
        AdharNo.setText("");
        AdharNo.setBackground(Color.WHITE);
        PanNo.setText("");
        PanNo.setBackground(Color.WHITE);
        Email.setText("");
        Email.setBackground(Color.WHITE);
        Address.setText("");
        Address.setBackground(Color.WHITE);
        Gender.setSelectedIndex(0);
        AccountType.setSelectedIndex(0);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AccountNo;
    private javax.swing.JComboBox<String> AccountType;
    private javax.swing.JTextField Address;
    private javax.swing.JTextField AdharNo;
    private javax.swing.JTextField Amount;
    private javax.swing.JTextField CAccountNo;
    private javax.swing.JButton Clear;
    private javax.swing.JButton CloseBtn;
    private javax.swing.JButton CloseBtnCustomer;
    private javax.swing.JTable CustomerDataTable;
    private javax.swing.JButton DeleteBtn;
    private javax.swing.JButton DepositBtn;
    private javax.swing.JTextField Email;
    private javax.swing.JTextField Fname;
    private javax.swing.JComboBox<String> Gender;
    private javax.swing.JTextField Lname;
    private javax.swing.JTextField MobileNo;
    private javax.swing.JTextField PanNo;
    private javax.swing.JButton UpdateBtn;
    private javax.swing.JButton WithdrawBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
